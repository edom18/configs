
#-----------------------------
# command setting
#-----------------------------
#cdでpushdする
setopt auto_pushd

#pushdで同じディレクトリを重複してpushしない
setopt pushd_ignore_dups

#ディレクトリ名だけで移動できる
setopt auto_cd

## ファイル名で #, ~, ^ の 3 文字を正規表現として扱う
#setopt extended_glob

# 
setopt nonomatch

#-----------------------------
# zstyle
#-----------------------------
#補完時に大文字小文字を区別しない
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*:default' menu select

## 補完候補に色を付ける。
### "": 空文字列はデフォルト値を使うという意味。
zstyle ':completion:*:default' list-colors ""

## 補完方法毎にグループ化する。
### 補完方法の表示方法
###   %B...%b: 「...」を太字にする。
###   %d: 補完方法のラベル
zstyle ':completion:*' format '%B%d%b'
zstyle ':completion:*' group-name ''

zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin \
/usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin

zstyle ':vcs_info:bzr:*' use-simple true


#-----------------------------
# Parameter settings.
#-----------------------------
export SVN_EDITOR="vim"
export LSCOLORS=cxfxcxdxbxegedabagacad



#directory
#CDPATH=:~

#key bind
bindkey -v

###############################################
# Functions
###############################################

function f() {
    find . -type f -name "*$1*"
}

renameOv() {
  local suffix="o"

  while getopts ":s:" opt; do
    case $opt in
      s ) if [ -n "$OPTARG" ]; then
            suffix=$OPTARG
          elif [ -z "$OPTARG" ]; then
            echo "No option argument."
            return 1
          fi;;
    esac
  done

  shift $(($OPTIND - 1))


  if [ -z $1 ]; then
    echo "No filename argument."
    return 1
  fi

  for file in "$@"
  do
    if [ ! -d "$file" ]; then
      ex=${file##*.}

      filename=${file%.*}
      outname=${filename}_${suffix}.${ex}
      mv $file $outname
    fi
  done
}

rename() {
  local from=$1
  local to=$2

  if [ -z "$from" -o -z "$to" ]; then
    echo "dose not enogh arguments."
    return 1
  fi

  for FILE in ./*
  do
      mv $FILE $(echo $FILE | sed -e "s/$from/$to/") 
  done
}


#PROMPT="%/%% "
#PROMPT2="%_%% "
#SPROMPT="%r is correct? [n,y,a,e]: "

#set prompt color
# PROMPT=$'%{\e[33m%}%~%{\e[00m%}
# %{\e[36m%}%n@%m$%{\e[00m%} '

#RPROMPT=$'%{\e[33m%}[%~]%{\e[m%}'

autoload -U colors; colors

# -------------------------------------------------------
# Gitリポジトリを表示する関数 ここから↓
# function rprompt-git-current-branch {
#         local name st color
# 
#         if [[ "$PWD" =~ '/\.git(/.*)?$' ]]; then
#                 return
#         fi
#         name=$(basename "`git symbolic-ref HEAD 2> /dev/null`")
#         if [[ -z $name ]]; then
#                 return
#         fi
#         st=`git status 2> /dev/null`
#         if [[ -n `echo "$st" | grep "^nothing to"` ]]; then
#                 color=${fg[green]}
#         elif [[ -n `echo "$st" | grep "^nothing added"` ]]; then
#                 color=${fg[yellow]}
#         elif [[ -n `echo "$st" | grep "^# Untracked"` ]]; then
#                 color=${fg_bold[red]}
#         else
#                 color=${fg[red]}
#         fi
# 
#         # %{...%} は囲まれた文字列がエスケープシーケンスであることを明示する
#         # これをしないと右プロンプトの位置がずれる
#         echo "%{$color%}$name%{$reset_color%} "
# }

# プロンプトが表示されるたびにプロンプト文字列を評価、置換する
# setopt prompt_subst

# Promptの右側に表示
# RPROMPT='[`rprompt-git-current-branch`%~]'

# Gitリポジトリを表示する関数 ここまで↑
# -------------------------------------------------------


###############################################
# autoload                                    #
###############################################
autoload zmv
alias zmv='noglob zmv -W'

fpath=(~/.zsh/completion $fpath)

#autoload -U compinit
#compinit
autoload -Uz compinit
compinit -u
autoload colors
colors


###############################################
# 履歴関係                                    #
###############################################
HISTFILE="$HOME/.zsh_history"

HISTSIZE=100000
SAVEHIST=100000

setopt hist_ignore_dups
setopt share_history
setopt hist_ignore_space

autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey -e
bindkey "^P" history-beginning-search-backward-end
bindkey "^N" history-beginning-search-forward-end


# git completion
autoload -U bashcompinit
bashcompinit
#source ~/git-completion.bash




autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
zstyle ':chpwd:*' recent-dirs-max 5000
zstyle ':chpwd:*' recent-dirs-default yes
zstyle ':completion:*' recent-dirs-insert both

source ~/.perlbrew/etc/bashrc

#Git diff archiver
function git_diff_archive() 
{
    local diff=""
    local h="HEAD"
    if [ $# -eq 1 ]; then
        if expr "$1" : '[0-9]*' > /dev/null ; then
            diff="HEAD HEAD~${1}"
        else
            diff="HEAD ${1}"
        fi
    elif [ $# -eq 2 ]; then
        diff="${1} ${2}"
        h=$1
    fi
    if [ "$diff" != "" ]; diff="git diff --name-only ${diff}"
        git archive --format=zip --prefix=archive/ $h `eval $diff` -o archive.zip
}

PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting

#for rbenv
export PATH="/Users/edo/.rbenv/shims:${PATH}"
source "/usr/local/Cellar/rbenv/0.4.0/libexec/../completions/rbenv.zsh"
rbenv rehash 2>/dev/null
rbenv() {
  typeset command
  command="$1"
  if [ "$#" -gt 0 ]; then
    shift
  fi

  case "$command" in
  rehash|shell)
    eval `rbenv "sh-$command" "$@"`;;
  *)
    command rbenv "$command" "$@";;
  esac
}



# zaw
source ~/zsh_plugins/zaw/zaw.zsh
bindkey '^[d' zaw-cdr
bindkey '^[g' zaw-git-branches
bindkey '^[@' zaw-gitdir

function zaw-src-gitdir () {
  _dir=$(git rev-parse --show-cdup 2>/dev/null)
  if [ $? -eq 0 ]
  then
    candidates=( $(git ls-files ${_dir} | perl -MFile::Basename -nle \
                                               '$a{dirname $_}++; END{delete $a{"."}; print for sort keys %a}') )
  fi
  actions=("zaw-src-gitdir-cd")
  act_descriptions=("change directory in git repos")
}

function zaw-src-gitdir-cd () {
  BUFFER="cd $1"
  zle accept-line
}
zaw-register-src -n gitdir zaw-src-gitdir

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"



# Path to your oh-my-zsh installation.
export ZSH=/Users/hiruma-kazuya/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
# ZSH_THEME="robbyrussell"
ZSH_THEME="fox"


# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

source $ZSH/oh-my-zsh.sh

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

function peco-select-history() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(\history -n 1 | \
        eval $tac | \
        peco --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle clear-screen
}
zle -N peco-select-history
bindkey '^r' peco-select-history


#-----------------------------
#alias setting
#-----------------------------
alias ...='cd ../../'
alias ....='cd ../../../'
alias .....='cd ../../../'
alias ......='cd ../../../../'

alias v='open -a "MacVim.app"'
alias w='open -a "WebStorm.app"'
alias x='open -a "Xcode.app"'
alias g='git'
alias gr='grunt'
alias j='jobs'
alias o='open'
alias c='cat'
alias cp='gcp'
alias mcs='gmcs'
alias ll='ls -l'
alias la='ls -la'
alias lla='la -l'
alias ls='ls -GF'
alias pwdcp='pwd | pbcopy'
alias rehosts='sudo vi /etc/hosts'
alias revhosts='sudo vi /etc/apache2/extra/httpd-vhosts.conf'
alias rezsh='v ~/.zshrc'
alias grep='grep --color=always'
alias ims="mdls -name kMDItemFSName -name kMDItemPixelWidth -name kMDItemPixelHeight"
alias p='qlmanage -p "$@" >& /dev/null'

#pipe alias
alias -g G='| grep'
alias -g AS='| awk'
alias -g X='| xargs'

#for Git
alias gst='git st -s -b' 
alias glgg='git logg'
unalias gsta=''

#for Java
alias java='java -Dfile.encoding=UTF-8'
alias javac='javac -J-Dfile.encoding=utf-8'

#for Cordova
alias cdvcreate='~/Tools/Cordova/bin/create'

